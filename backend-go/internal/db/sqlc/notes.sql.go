// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUserNote = `-- name: CreateUserNote :one
INSERT INTO notes (id, user_id, title, description, visible_at)
VALUES (?, ?, ?, ?, ?)
RETURNING id, user_id, title, description, visible_at, created_at, updated_at, deleted_at
`

type CreateUserNoteParams struct {
	ID          string
	UserID      string
	Title       string
	Description sql.NullString
	VisibleAt   sql.NullTime
}

func (q *Queries) CreateUserNote(ctx context.Context, arg CreateUserNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createUserNote,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.VisibleAt,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.VisibleAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserNote = `-- name: DeleteUserNote :exec
DELETE FROM notes
WHERE id = ? and user_id = ?
`

type DeleteUserNoteParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteUserNote(ctx context.Context, arg DeleteUserNoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserNote, arg.ID, arg.UserID)
	return err
}

const getUserNote = `-- name: GetUserNote :one
SELECT id, user_id, title, description, visible_at, created_at, updated_at, deleted_at FROM notes
WHERE user_id = ? and id = ?
`

type GetUserNoteParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetUserNote(ctx context.Context, arg GetUserNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getUserNote, arg.UserID, arg.ID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.VisibleAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUserNotes = `-- name: ListUserNotes :many
SELECT id, user_id, title, description, visible_at, created_at, updated_at, deleted_at FROM notes
WHERE user_id = ? ORDER BY created_at desc
`

func (q *Queries) ListUserNotes(ctx context.Context, userID string) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listUserNotes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.VisibleAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserNote = `-- name: UpdateUserNote :one
UPDATE notes
SET title = ?, description = ?
WHERE id = ? and user_id = ?
RETURNING id, user_id, title, description, visible_at, created_at, updated_at, deleted_at
`

type UpdateUserNoteParams struct {
	Title       string
	Description sql.NullString
	ID          string
	UserID      string
}

func (q *Queries) UpdateUserNote(ctx context.Context, arg UpdateUserNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateUserNote,
		arg.Title,
		arg.Description,
		arg.ID,
		arg.UserID,
	)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.VisibleAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
